{"version":3,"file":"static/js/6438.964db297.chunk.js","mappings":"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","sources":["modules/Glossaire/GlossaireService.tsx","view/Glossaire/Header.tsx","view/Glossaire/styles/FilterStyles.tsx","view/Glossaire/shared/LoadingData.tsx","view/Glossaire/shared/NoDataFound.tsx","view/Glossaire/Filter.tsx","view/Glossaire/styles/GlossaireSection.tsx","view/Glossaire/Modal/ModalHeader.tsx","view/Glossaire/Modal/ModalLabel.tsx","view/Glossaire/GloassaireList.tsx","view/Glossaire/Glossaire.tsx","view/shared/BreadCrumbs.tsx"],"sourcesContent":["import authAxios from \"src/modules/shared/axios/authAxios\";\nimport AuthCurrentTenant from \"src/modules/auth/authCurrentTenant\";\n\nexport default class GlossaireService {\n    static async getGloassaireCategories() {\n        const tenantId = AuthCurrentTenant.get();\n        const response = await authAxios.get(`/tenant/${tenantId}/category-glossaire`, {});\n        return response.data;\n    }\n    // fetchin list of glossaire\n    static async getGloassaireList() {\n        const tenantId = AuthCurrentTenant.get();\n        const response = await authAxios.get(`/tenant/${tenantId}/glossaire`, {});\n        return response.data;\n    }\n}\n","import React from 'react'\nimport BreadCrumbs from '../shared/BreadCrumbs'\nimport styled from 'styled-components'\n\nexport default function Header() {\n    return (\n        <div>\n\n            <BreadCrumbs view='glossaire' />\n\n            {/* TITLE */}\n            <div className='archieve__header'>\n                <h2>GLOSSAIRE&nbsp;</h2>\n                <div className='communiquer__bar'></div>\n            </div>\n\n            {/* DESCRIPTION PLACEHOLDER */}\n            <DescriptionSection>\n                <p>\n                    Description lorem ipsum, dolor sit amet consectetur adipisicing\n                    elit. Omnis voluptates deserunt optio maxime ad vero voluptatum\n                    quibusdam laborum nulla\n                </p>\n            </DescriptionSection>\n        </div>\n    )\n}\n\nconst DescriptionSection = styled.section`\n    color: var(--violet);\n    font-size: 1rem;\n    font-weight: 400;\n    margin: 1rem 0;\n    text-align: justify;\n`\n","import styled from 'styled-components'\n\nconst FilterStyles = styled.section`\n  max-width: 1170px;\n  margin: 2rem 0;\n  font-size: 1rem;\n  background-color: #F1F1F1;\n  \n\n  .tabsHeader{\n    border-bottom: 1px solid #A3A3A9;\n\n    button{\n      padding: 1rem;\n      font-size: 1rem;\n      color: var(--gray3);\n      position: relative;\n    }\n    .active{\n      color: var(--violet);\n\n      &::after{\n        content: \"\";\n        display: block;\n        width: 70%;\n        height: 2px;\n        position: absolute;\n        left: 50%;\n        bottom: -2px;\n        transform: translateX(-50%);\n        background-color: red;\n        transition: .2s ease-in-out;\n      }\n    }\n  }\n\n  .tabContent{\n    padding: 1rem;\n    font-size: 1.4rem;\n    color: var(--violet);\n\n    .letterLinkFilter{\n      display: inline-block;\n      padding: .2rem .2rem;\n      font-weight: 700;\n      cursor: pointer;\n\n      &:hover{\n        color: red;\n      }\n    }\n\n    .categoryLink{\n      font-size: 1rem;\n      text-transform: uppercase;\n      cursor: pointer;\n      color: var(--violet);\n      background-color: #fff;\n      padding: .3rem .5rem;\n      margin: 0 .3rem;\n\n      &:hover{\n        color: red;\n      }\n    }\n  }\n`\n\nexport default FilterStyles\n","import React from 'react'\nimport styled from 'styled-components'\n// ICONS\nimport { MdOutlineHourglassEmpty } from 'react-icons/md'\n\n\nexport default function LoadingData() {\n    return (\n        <TabMessage>\n            <MdOutlineHourglassEmpty className='icon loadingIcon' />\n            <span>Chargement des donn√©es</span>\n        </TabMessage>\n    )\n}\n\nconst TabMessage = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    .icon{\n        font-size: 2rem;\n        color: var(--violet);\n    }\n\n    .loadingIcon{\n        animation: spin infinite 2s ease-in-out;\n    }\n\n    span{\n        margin-top: 1rem;\n    }\n\n    @keyframes spin {\n        from {transform:rotate(0deg);}\n        to {transform:rotate(360deg);}\n    }\n`","import React from 'react'\nimport styled from 'styled-components'\n// ICONS\nimport { MdOutlineHourglassEmpty } from 'react-icons/md'\nimport { CgSmileNone } from 'react-icons/cg'\n\n\nexport default function NoDataFound() {\n    return (\n        <TabMessage>\n            <CgSmileNone className='icon' />\n            <span>Aucune donn√©e disponible</span>\n        </TabMessage>\n    )\n}\n\nconst TabMessage = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    .icon{\n        font-size: 2rem;\n        color: var(--violet);\n    }\n\n    .loadingIcon{\n        animation: spin infinite 2s ease-in-out;\n    }\n\n    span{\n        margin-top: 1rem;\n    }\n`","import React, { useState, useEffect } from 'react'\nimport FilterStyles from './styles/FilterStyles'\nimport { Link } from 'react-scroll'\nimport GlossaireService from 'src/modules/Glossaire/GlossaireService';\n\n// COMPONENTS\nimport LoadingData from './shared/LoadingData';\nimport NoDataFound from './shared/NoDataFound';\n\nexport default function Filter({ setGroupByCategory }) {\n\n    // current tab\n    const [activeTab, setActiveTab] = useState(true);\n    const toggleTabOnClick = _ => {\n        setActiveTab(current => !current);\n        setGroupByCategory(false);\n        if (activeTab) {\n            setGetCategoriesTrigger(true);\n            setGroupByCategory(true);\n        }\n    }\n\n    // dummy letters array to use as links\n    const letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n\n    // Glossaire ccategories\n    const [glossaireCategories, setGlossaireCategories] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n    // fetching category only if user switched tabs\n    const [getCategoriesTrigger, setGetCategoriesTrigger] = useState(false);\n\n    useEffect(() => {\n        if (getCategoriesTrigger) {\n            GlossaireService.getGloassaireCategories()\n                .then(res => {\n                    console.log(res);\n                    setGlossaireCategories(res.rows);\n                    setIsLoading(false);\n                })\n        }\n    }, [getCategoriesTrigger])\n\n    return (\n        <div>\n            {/* FILTER */}\n            <FilterStyles>\n                <div className=\"tabsHeader\">\n                    <button\n                        className={activeTab ? 'active' : ''}\n                        onClick={toggleTabOnClick}\n                    >\n                        Par lettre\n                    </button>\n                    <button\n                        className={!activeTab ? 'active' : ''}\n                        onClick={toggleTabOnClick}\n                    >\n                        Par cat√©gorie\n                    </button>\n                </div>\n                <div className=\"tabContent\">\n\n                    {\n                        activeTab &&\n                        <div className=\"tab letterTab\">\n                            {\n                                letters.map(l => {\n                                    return (\n                                        <Link\n                                            to={l}\n                                            smooth={true}\n                                            duration={300}\n                                            key={l}\n                                            className=\"letterLinkFilter\"\n                                        >\n                                            {l.toUpperCase()}\n                                        </Link>\n                                    );\n                                })\n                            }\n                        </div>\n                    }\n\n                    {\n                        !activeTab &&\n                        <div className=\"tab categoryTab\">\n                            {\n                                !isLoading\n                                    ?\n                                    <div>\n                                        {\n                                            glossaireCategories.length\n                                                ?\n                                                <section>\n                                                    {\n                                                        glossaireCategories.map(gc => {\n                                                            return (\n                                                                <Link\n                                                                    to={gc['titleFR']}\n                                                                    smooth={true}\n                                                                    duration={300}\n                                                                    key={gc['id']}\n                                                                    className=\"categoryLink\"\n                                                                >\n                                                                    {gc['titleFR']}\n                                                                </Link>\n\n                                                            )\n                                                        })\n                                                    }\n                                                </section>\n                                                :\n                                                <NoDataFound />\n                                        }\n                                    </div>\n                                    :\n                                    <LoadingData />\n                            }\n                        </div>\n                    }\n\n                    {/* end of tab content */}\n                </div>\n            </FilterStyles >\n        </div >\n    )\n}\n","import styled from 'styled-components'\n\nconst GlossaireSection = styled.section`\n    width: 100%;\n    padding: 1rem 0;\n\n    .sectionHeader{\n        span{\n            color: var(--violet);\n            font-size: 2rem;\n            font-weight: 700;\n\n            &:after{\n                content: '';\n                display: block;\n                width: 100%;\n                height: 1px;\n                background-color: red;\n                margin: 1rem 0;\n            }\n        }\n    }\n\n    .sectionBody{\n        .glossaireLink{\n            display: block;\n            width: auto;\n            height: 30px;\n            padding: .4rem 0;\n            margin: 1rem 0;\n\n            text-align: left;\n            font-weight: 600;\n            font-size: 1rem;\n\n            background-color: transparent;\n            border: none;\n            color: var(--violet);\n\n            &:hover{\n                color: red;\n                border-bottom: 1px solid red;\n            }\n        }\n    }\n`\n\nexport default GlossaireSection;","import React from 'react'\nimport styled from 'styled-components'\n\n// ICONS\nimport { VscChromeClose } from 'react-icons/vsc'\n\nexport default function ModalHeader({ title, setIsShowing }) {\n    return (\n        <Header>\n            <h1>{title}</h1>\n            <span\n                className=\"closeTrigger\"\n                onClick={() => setIsShowing(false)}\n            >\n                <VscChromeClose />\n            </span>\n        </Header>\n    )\n}\n\n\nconst Header = styled.div`\n    width: 100%;\n    height: 50px;\n    font-size: 2.1rem;\n    font-weight: 700;\n    text-transform: uppercase;\n    color: var(--violet);\n\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-between;\n\n    .closeTrigger{\n        font-size: 3rem;\n        cursor: pointer;\n        \n        &:hover{\n            color: red;\n        }\n    }\n`","import React from 'react'\nimport styled from 'styled-components'\n\nexport default function ModalLabel({ label }) {\n    return (\n        <Label>{label}</Label>\n    )\n}\n\n\nconst Label = styled.div`\n    width: fit-content;\n    margin: 1rem 0;\n    padding: .5rem 1rem;\n    font-size: 1rem;\n    font-weight: 400;\n    text-transform: capitalize;\n    color: red;\n    background-color: rgba(225,1,26, .06);\n    border-radius: .2rem;\n`","import React, { useState } from \"react\";\nimport GlossaireSection from \"./styles/GlossaireSection\";\nimport _ from \"lodash\";\n// MODAL\nimport Modal from \"react-modal\";\nimport ModalHeader from \"./Modal/ModalHeader\";\nimport ModalLabel from \"./Modal/ModalLabel\";\n\n// PACKAGES\nvar arraySort = require(\"array-sort\");\nvar groupArray = require(\"group-array\");\n\nexport default function GloassaireList({ data, criteria }) {\n  // HELPER FUNCTION(S)\n  const initial = (text) => {\n    return _.capitalize(text?.substring(0, 1));\n  };\n\n  // ### LETTER TAB LOGIC ###\n  let arrayOfData: any[] = [];\n\n  if (criteria === \"letter\") {\n    data.forEach((GLOSSOBJECT) => {\n      arrayOfData.push({\n        letter: initial(GLOSSOBJECT.nomFR),\n        data: GLOSSOBJECT,\n      });\n    });\n    arrayOfData = groupArray(arraySort(arrayOfData, \"letter\"), \"letter\");\n  }\n  const initialsList: any = Object.keys(arrayOfData);\n\n  // ### CATEGORY TAB LOGIC ###\n  const categoriesList: any = Object.keys(data);\n  const [isShowing, setIsShowing] = useState(false);\n\n  Modal.setAppElement(\"#root\");\n  const [modalData, setModalData] = useState([\n    { nomFR: \"\", definitionFR: \"\", categorie: { titleFR: \"\" } },\n  ]);\n  const [modalDataLetter, setModalDataLetter] = useState([\n    { data: { nomFR: \"\", definitionFR: \"\", categorie: { titleFR: \"\" } } },\n  ]);\n  const handleClick = (CAT, ID) => {\n    setIsShowing(true);\n    if (criteria === \"category\") {\n      const modalData = data[CAT].filter((glossaireObject) => {\n        return glossaireObject.id === ID;\n      });\n      if (modalData.length > 0) {\n        setModalData(modalData);\n      }\n    } else {\n      const modalDataLetter = arrayOfData[CAT].filter((glossaireObject) => {\n        return glossaireObject.data._id === ID;\n      });\n      if (modalDataLetter.length > 0) {\n        setModalDataLetter(modalDataLetter);\n      }\n    }\n  };\n\n  return (\n    <div>\n      {/* LIST OF ENTRIES */}\n      <section className='listOfEntries'>\n        {\n          // ============ CATEGORY TAB ============\n          criteria === \"category\" && (\n            <div>\n              {categoriesList.map((CAT) => {\n                const glossList = data[CAT];\n                return (\n                  <GlossaireSection key={CAT} id={CAT}>\n                    <div className='sectionHeader'>\n                      <span>{CAT}</span>\n                    </div>\n                    <section className='sectionBody'>\n                      {glossList.map((GLOSS) => {\n                        return (\n                          <section key={GLOSS.id}>\n                            <button\n                              className='glossaireLink'\n                              onClick={() => handleClick(CAT, GLOSS.id)}>\n                              {GLOSS.nomFR}\n                            </button>\n\n                            <Modal\n                              isOpen={isShowing}\n                              onRequestClose={() => setIsShowing(false)}\n                              style={{\n                                overlay: {\n                                  backgroundColor: \"rgba(43, 40, 64, 0.5)\",\n                                },\n                                content: {\n                                  width: \"700px\",\n                                  height: \"500px\",\n                                  margin: \"auto\",\n                                  padding: \"3.5rem\",\n                                  fontFamily: \"Proxima Nova\",\n                                  textAlign: \"justify\",\n                                  color: \"var(--violet)\",\n                                },\n                              }}>\n                              <ModalHeader\n                                title={modalData[0][\"nomFR\"]}\n                                setIsShowing={setIsShowing}\n                              />\n                              <ModalLabel\n                                label={modalData[0][\"categorie\"].titleFR}\n                              />\n                              <p>{modalData[0][\"definitionFR\"]}</p>\n                            </Modal>\n                          </section>\n                        );\n                      })}\n                    </section>\n                  </GlossaireSection>\n                );\n              })}\n            </div>\n          )\n        }\n\n        {/* RENDERING DATA BASED ON FILTER */}\n\n        {\n          // ============ LETTER TAB ============\n          criteria !== \"category\" && (\n            <div>\n              {initialsList.map((GLOSSAIREINITIAL) => {\n                const glossList = arrayOfData[GLOSSAIREINITIAL];\n                return (\n                  <GlossaireSection\n                    key={GLOSSAIREINITIAL}\n                    id={GLOSSAIREINITIAL}>\n                    <div className='sectionHeader'>\n                      <span>{GLOSSAIREINITIAL}</span>\n                    </div>\n                    <section className='sectionBody'>\n                      {glossList.map((ENTRY) => {\n                        return (\n                          <section key={ENTRY.data.id}>\n                            <button\n                              className='glossaireLink'\n                              onClick={() =>\n                                handleClick(GLOSSAIREINITIAL, ENTRY.data.id)\n                              }>\n                              {ENTRY.data.nomFR}\n                            </button>\n\n                            <Modal\n                              isOpen={isShowing}\n                              onRequestClose={() => setIsShowing(false)}\n                              style={{\n                                overlay: {\n                                  backgroundColor: \"rgba(43, 40, 64, 0.5)\",\n                                },\n                                content: {\n                                  width: \"700px\",\n                                  height: \"500px\",\n                                  margin: \"auto\",\n                                  padding: \"3.5rem\",\n                                  fontFamily: \"Proxima Nova\",\n                                  textAlign: \"justify\",\n                                  color: \"var(--violet)\",\n                                },\n                              }}>\n                              <ModalHeader\n                                title={modalDataLetter[0][\"data\"][\"nomFR\"]}\n                                setIsShowing={setIsShowing}\n                              />\n                              <ModalLabel\n                                label={\n                                  modalDataLetter[0][\"data\"][\"categorie\"]\n                                    .titleFR\n                                }\n                              />\n                              <p>\n                                {modalDataLetter[0][\"data\"][\"definitionFR\"]}\n                              </p>\n                            </Modal>\n                          </section>\n                        );\n                      })}\n                    </section>\n                  </GlossaireSection>\n                );\n              })}\n            </div>\n          )\n        }\n      </section>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport styled from 'styled-components';\nimport GlossaireService from \"src/modules/Glossaire/GlossaireService\";\n\n// COMPONENTS\nimport Header from \"./Header\";\nimport Filter from \"./Filter\";\nimport GloassaireList from \"./GloassaireList\";\nimport LoadingData from \"./shared/LoadingData\";\nimport NoDataFound from \"./shared/NoDataFound\";\nimport Footer from \"../Layout/CopyWrite\";\n\n// Packages\nvar groupArray = require(\"group-array\");\n\nfunction Glossaire() {\n  // state to hold a copy of the glossaire list (with all data)\n  const [glossaireList, setGlossaireList] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // FETCHING initial data from DB\n  const getGlossaire = () => {\n    GlossaireService.getGloassaireList().then((gl) => {\n      setGlossaireList(gl.rows);\n      setIsLoading(false);\n    });\n  };\n  useEffect(() => {\n    getGlossaire();\n  }, []);\n\n  // passing grouped data (category)\n  const [groupByCategory, setGroupByCategory] = useState(false);\n\n  return (\n    <>\n      <GlossaireLayout>\n        <Header />\n        <Filter setGroupByCategory={setGroupByCategory} />\n        {isLoading ? (\n          <LoadingData />\n        ) : (\n          <section>\n            {!glossaireList.length ? (\n              <NoDataFound />\n            ) : (\n              <>\n                {groupByCategory ? (\n                  <GloassaireList\n                    data={groupArray(glossaireList, \"categorie.titleFR\")}\n                    criteria='category'\n                  />\n                ) : (\n                  <GloassaireList data={glossaireList} criteria='letter' />\n                )}\n              </>\n            )}\n          </section>\n        )}\n      </GlossaireLayout>\n    </>\n  );\n}\n\nexport default Glossaire;\n\nconst GlossaireLayout = styled.section`\n  max-width: 1170px;\n  margin: 2rem auto;\n\n  font-family: \"Proxima Nova\";\n  font-style: normal;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nexport default function BreadCrumbs({ view }) {\n  const capitalize = (text) => {\n    return text.charAt(0).toUpperCase() + text.slice(1);\n  };\n\n  return (\n    <div>\n      {/* BREADCRUMBS */}\n      <BreadCrumbsHeader>\n        <Link to='/' className='homeLinkInBC'>\n          Accueil\n        </Link>{\" \"}\n        <span className='currentView'>/ {capitalize(view)}</span>\n      </BreadCrumbsHeader>\n    </div>\n  );\n}\n\nconst BreadCrumbsHeader = styled.div`\n  margin: 0.7rem 0;\n  font-size: \"1rem\";\n  font-family: \"Proxima Nova\";\n\n  .currentView {\n    color: var(--gray3);\n  }\n\n  .homeLinkInBC {\n    text-decoration: none;\n    color: var(--gray2);\n\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n`;\n"],"names":["GlossaireService","tenantId","AuthCurrentTenant","authAxios","response","data","Header","BreadCrumbs","view","className","DescriptionSection","styled","LoadingData","TabMessage","NoDataFound","Filter","setGroupByCategory","useState","activeTab","setActiveTab","toggleTabOnClick","_","current","setGetCategoriesTrigger","glossaireCategories","setGlossaireCategories","isLoading","setIsLoading","getCategoriesTrigger","useEffect","getGloassaireCategories","then","res","console","log","rows","onClick","map","l","to","smooth","duration","toUpperCase","length","gc","ModalHeader","title","setIsShowing","ModalLabel","label","Label","arraySort","require","groupArray","GloassaireList","criteria","arrayOfData","forEach","GLOSSOBJECT","text","push","letter","nomFR","substring","initialsList","Object","keys","categoriesList","isShowing","Modal","definitionFR","categorie","titleFR","modalData","setModalData","modalDataLetter","setModalDataLetter","handleClick","CAT","ID","filter","glossaireObject","id","_id","glossList","GLOSS","isOpen","onRequestClose","style","overlay","backgroundColor","content","width","height","margin","padding","fontFamily","textAlign","color","GLOSSAIREINITIAL","ENTRY","glossaireList","setGlossaireList","getGloassaireList","gl","groupByCategory","GlossaireLayout","BreadCrumbsHeader","charAt","slice"],"sourceRoot":""}